# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Goroutine {
  use Go::Goroutine::Callback;
  use Go::Channel;
  use Native;
  use Native::Stack;
  use Go::Goroutine::Argument;
  
  # Enumerations
  enum {
    TYPE_NORMAL,
    TYPE_SCHEDULE,
    TYPE_NATIVE_THREAD,
    TYPE_CHANNEL,
    TYPE_SOCKET,
    TYPE_PIPE,
  }
  
  # Fields
  has type : int;
  
  has runnable : byte;
  
  has running : byte;
  
  has prev : Go::Goroutine;
  
  has next : Go::Goroutine;
  
  has channel : Go::Channel;
  
  has goroutine_stack : Native::Stack;
  
  has callback : Go::Goroutine::Callback;
  
  has goroutine_argument : Go::Goroutine::Argument;
  
  # Class Methods
  static method new : Go::Goroutine ($callback :  Go::Goroutine::Callback) {
    
    my $self = new Go::Goroutine;
    
    my $env = Native->get_current_env;
    
    my $goroutine_stack = $env->new_stack;
    
    $self->{goroutine_stack} = $goroutine_stack;
    
    $self->{callback} = $callback;
    
    my $goroutine_argument = Go::Goroutine::Argument->new($goroutine_stack, $callback);
    
    $self->{goroutine_argument} = $goroutine_argument;
    
    $self->init_goroutine($goroutine_argument);
    
    return $self;
  }
  
  native private method init_goroutine : void ($goroutine_argument : Go::Goroutine::Argument);
  
}
