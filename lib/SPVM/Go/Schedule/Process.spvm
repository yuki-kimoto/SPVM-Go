# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule::Process {
  use Go::Queue;
  use Go::Coroutine;
  use Go::Schedule::Thread;
  use Go::Schedule;
  
  # Interfaces
  interface Go::Queue::Element;
  
  # Fields
  has schedule : rw Go::Schedule;
  
  has coroutine_queue : rw Go::Queue of Go::Coroutine;
  
  has thread : Go::Schedule::Thread;
  
  has next : rw Go::Queue::Element;
  
  has schedule_coroutine : rw Go::Coroutine;
  
  # Class Methods
  static method new : Go::Schedule::Process () {
    
    my $self = new Go::Schedule::Process;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    my $thread = Go::Schedule::Thread->new;
    
    $self->{thread} = $thread;
    
    return $self;
  }
  
  # Instance Methods
  method start_schedule : void () {
    
    my $schedule_coroutine = $self->{schedule_coroutine};
    
    my $schedule_coroutine_callback = $schedule_coroutine->callback;
    
    $schedule_coroutine_callback->();
  }
}
