# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule::Task {
  allow Go::Schedule;
  
  use Sys::Time;
  use Sys::Time::Timeval;
  use Sys::Time::Timespec;
  use Sys::Poll::PollfdArray;
  use Sys::Poll::Constant as POLL;
  use Sys::Poll;
  
  has schedule : Go::Schedule;
  
  private static method new : Go::Schedule::Task () {
    
    my $self = new Go::Schedule::Task;
    
    return $self;
  }
  
  private method : void () {
    
    my $now_tv = Sys::Time::Timeval->new;
    
    my $loop_count = 0;
    while (1) {
      
      my $schedule = $self->{schedule};
      
      my $poll = $schedule->{poll};
      
      my $finshed = !$schedule->{coroutines}->length && !$poll->{coroutines_h}->keys_length;
      
      if ($finshed) {
        last;
      }
      
      my $check_io = 0;
      
      if ($loop_count % 60 == 0 || !$schedule->{coroutines}->length) {
        $check_io = 1;
      }
      
      if ($check_io) {
        my $ready_coroutines = $poll->get_ready_coroutines;
        for my $ready_coroutine (@$ready_coroutines) {
          $schedule->{coroutines}->push($ready_coroutine);
        }
      }
      else {
        my $coroutine = (Go::Coroutine)undef;
        
        if ($schedule->{coroutines}->length > 0) {
          $coroutine = (Go::Coroutine)$schedule->{coroutines}->shift;
        }
        
        if ($coroutine->{finished}) {
          $schedule->{current_coroutine} = undef;
        }
        elsif ($coroutine->{disable}) {
          $schedule->{coroutines}->push($coroutine);
        }
        else {
          my $over_deadline = 1;
          
          my $deadline_ts = $coroutine->{deadline};
          if ($deadline_ts) {
            
            my $now_sec = $now_tv->tv_sec;
            my $now_nsec = 1000 * $now_tv->tv_usec;
            
            my $deadline_sec = $deadline_ts->tv_sec;
            my $deadline_nsec = $deadline_ts->tv_nsec;
            
            Sys::Time->gettimeofday($now_tv, undef);
            
            if ($now_sec > $deadline_sec || ($now_sec == $deadline_sec && $deadline_nsec > $deadline_nsec)) {
              $coroutine->{deadline} = undef;
            }
            else {
              $schedule->{coroutines}->push($coroutine);
              $over_deadline = 0;
            }
          }
          
          
          my $fd = $coroutine->{fd};
          if ($fd >= 0) {
            my $coroutine_address = Fn->to_address($coroutine);
            $schedule->{poll}->{coroutines_h}->set($coroutine_address, $coroutine);
          }
          else {
            if ($over_deadline) {
              
              my $schedule_task_coroutine = $schedule->{schedule_task_coroutine};
              
              $schedule->{coroutines}->push($coroutine);
              
              $coroutine->{return_back} = $schedule_task_coroutine;
              
              $schedule->{current_coroutine} = $coroutine;
              
              Go::Coroutine->transfer($schedule_task_coroutine, $coroutine);
            }
          }
        }
      }
      
      $loop_count++;
    }
  }
  
}
