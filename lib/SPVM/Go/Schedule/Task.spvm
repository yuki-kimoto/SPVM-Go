# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule::Task {
  allow Go::Schedule;
  
  private static method new : Go::Schedule::Task () {
    
    my $self = new Go::Schedule::Task;
    
    return $self;
  }
  
  method : void () {
    
    while (1) {
      
      my $schedule = $self->{schedule};
      
      my $process_task_coroutine = $schedule->{task_coroutine};
      
      my $coroutine = (Go::Coroutine)$schedule->{coroutine_queue}->dequeue;
      
      if ($coroutine) {
        $schedule->{current_coroutine} = $coroutine;
        Go::Coroutine->transfer($process_task_coroutine, $coroutine);
      }
      else {
        my $return_back = $schedule->{return_back};
        
        $self->{schedule} = undef;
        
        Go::Coroutine->transfer($process_task_coroutine, $return_back);
      }
    }
    
  }
  
  has schedule : Go::Schedule;
}
