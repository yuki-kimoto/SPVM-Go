# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Queue {
  use Go::Queue::Element;
  
  has first : rw Go::Queue::Element;
  
  has last : rw Go::Queue::Element;
  
  static method new : Go::Queue () {
    
    my $self = new Go::Queue;
    
    return $self;
  }
  
  method enqueue : void ($element : Go::Queue::Element) {
    if (my $last = $self->{last}) {
      $last->set_next($element);
      $self->{last} = $element;
    }
    else {
      $self->{first} = $element;
      $self->{last} = $element;
    }
  }
  
  method dequeue : Go::Queue::Element () {
    my $element = (Go::Queue::Element)undef;
    
    if ($self->{first}) {
      $element = $self->{first};
      if ($self->{first} == $self->{last}) {
        $self->{first} = undef;
        $self->{last} = undef;
      }
      else {
        $self->{first} = $self->{first}->next;
      }
    }
    
    if ($element) {
      $element->set_next(undef);
    }
    
    return $element;
  }
  
}
