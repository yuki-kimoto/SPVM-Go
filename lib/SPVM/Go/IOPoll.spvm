# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::IOPoll {
  use Go::Coroutine;
  use Go::Queue;
  
  has iopoll_coroutine : Go::Coroutine;
  
  has wait_coroutine_queue : Go::Queue of Go::Coroutine;
  
  static method new : Go::IOPoll () {
    
    my $self = new Go::IOPoll;
    
    my $iopoll_coroutine = $self->create_iopoll_coroutine;
    
    $self->{iopoll_coroutine} = $iopoll_coroutine;
    
    return $self;
  }
  
  method create_iopoll_coroutine : Go::Coroutine () {
  
    my $iopoll_callback : Callback;
    
    $iopoll_callback =
      [has wait_coroutine_queue : Go::Queue of Go::Coroutine = $self->{wait_coroutine_queue}]
      method : void () {
      while (1) {
        my $wait_coroutine_queue = $self->{wait_coroutine_queue};
        
        my $wait_coroutine = $wait_coroutine_queue->dequeue;
        
        if ($wait_coroutine) {
          
        }
        else {
          
        }
      }
    };
    
    my $iopoll_coroutine = Go::Coroutine->new($iopoll_callback);
    
    return $iopoll_coroutine;
  }
  
}
