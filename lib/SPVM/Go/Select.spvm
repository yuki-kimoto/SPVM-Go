# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Select {
  use Go::Select::Case;
  use Go::Select::Result;
  use Go::Channel;
  use List;
  use Fn;
  
  # Fields
  has read_cases_h : Hash of Go::Channel;
  
  has write_channels_h : Hash of Go::Channel;
  
  has non_blocking : rw byte;
  
  # Class Methods
  static method new : Go::Select () {
    
    my $self = new Go::Select;
    
    $self->{read_cases_h} = Hash->new;
    
    
    $self->{write_channels_h} = Hash->new;
    
    return $self;
  }
  
  # Instance Methods
  method add_read : void ($channel : Go::Channel) {
    
    my $read_cases_h = $self->{read_cases_h};
    
    my $case = Go::Select::Case->new;
    
    $case->{channel} = $channel;
    
    my $address = Fn->to_address($channel);
    
    $read_cases_h->set($address, $case);
  }
  
  method add_write : void ($channel : Go::Channel, $value : object) {
    
    my $write_channels_h = $self->{write_channels_h};
    
    my $case = Go::Select::Case->new;
    
    $case->{channel} = $channel;
    
    $case->{value} = $value;
    
    $case->{is_write} = 1;
    
    my $address = Fn->to_address($channel);
    
    $write_channels_h->set($address, $case);
  }
  
  method remove_read : void ($channel : Go::Channel) {
    
    my $read_cases_h = $self->{read_cases_h};
    
    my $address = Fn->to_address($channel);
    
    $read_cases_h->delete($address);
  }
  
  method remove_write : void ($channel : Go::Channel) {
    
    my $write_channels_h = $self->{write_channels_h};
    
    my $address = Fn->to_address($channel);
    
    $write_channels_h->delete($address);
  }
  
  method select : Go::Select::Result () {
    
    my $result = Go::Select::Result->new;
    
    return $result;
  }
}
