# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  allow Go;
  allow Go::Schedule::Task;
  
  use Go::Coroutine;
  use Go::Queue;
  use Go::Schedule::Task;
  use Sys::Time;
  
  has coroutine_queue : Go::Queue of Go::Coroutine;
  
  has current_coroutine : Go::Coroutine;
  
  has schedule_task_coroutine : Go::Coroutine;
  
  private static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    return $self;
  }
  
  private method schedule : void ($after : double = 0) {
    
    my $current_coroutine = $self->{current_coroutine};
    
    if ($current_coroutine) {
      
      my $schedule_task_coroutine = $self->{schedule_task_coroutine};
      
      unless ($after > 0) {
        
        my $now_tv = Sys::Time::Timeval->new;
        
        Sys::Time->gettimeofday($now_tv, undef);
        
        my $now = $now_tv->tv_sec + 0.000001 * $now_tv->tv_usec;
        
        my $deadline = $now + $after;
        
        $schedule_task_coroutine->{deadline} = $deadline;
      }
      
      Go::Coroutine->transfer($current_coroutine, $schedule_task_coroutine);
    }
    else {
      
      my $return_back = Go::Coroutine->new;
      
      my $schedule_task = Go::Schedule::Task->new;
      
      $schedule_task->{schedule} = $self;
      
      my $schedule_task_coroutine = Go::Coroutine->new($schedule_task);
      
      $schedule_task_coroutine->{return_back} = $return_back;
      
      $self->{schedule_task_coroutine} = $schedule_task_coroutine;
      
      Go::Coroutine->transfer($return_back, $schedule_task_coroutine);
      
      $schedule_task->{schedule} = undef;
      
      $self->{schedule_task_coroutine} = undef;
      
      $self->{current_coroutine} = undef;
      
      $schedule_task = undef;
      
      $schedule_task_coroutine->{task} = undef;
    }
  }
  
  private method add_task : void ($task : Callback) {
    
    my $coroutine = Go::Coroutine->new($task);
    
    $self->{coroutine_queue}->enqueue($coroutine);
  }
  
}
