# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  use Go::Coroutine;
  use Go::Schedule::Process;
  use Go::Schedule::Machine;
  use Go::Schedule::Monitor;
  use Go::Queue;
  use Go::Poll;
  
  has coroutine_queue : rw Go::Queue of Go::Coroutine;
  
  has process_queue : rw Go::Queue of Go::Schedule::Process;
  
  has idle_process_queue : rw Go::Queue of Go::Schedule::Process;
  
  has processes_max : rw int;
  
  has idle_thread_queue : rw Go::Queue of Go::Schedule::Machine;
  
  has poll : rw Go::Poll;
  
  has monitor : rw Go::Schedule::Monitor;
  
  static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    my $poll = Go::Poll->new;
    
    $self->{poll} = $poll;
    
    my $processes_max = 1;
    
    $self->{processes_max} = $processes_max;
    
    my $process = Go::Schedule::Process->new;
    
    $self->{process_queue} = Go::Queue->new;
    
    $self->{process_queue}->enqueue($process);
    
    $self->{idle_process_queue} = Go::Queue->new;
    
    $self->{idle_thread_queue} = Go::Queue->new;
    
    for (my $i = 0; $i < $processes_max; $i++) {
      my $process = Go::Schedule::Process->new;
      
      $self->process_queue->enqueue($process);
    }
    
    $self->{monitor} = Go::Schedule::Monitor->new;
    
    return $self;
  }
  
}
