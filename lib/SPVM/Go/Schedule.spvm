# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  use Go::Coroutine;
  use Go::Process;
  use Go::Machine;
  use Go::Monitor;
  use Go::Queue;
  use Go::Poll;
  
  has finished : rw byte;
  
  has coroutine_queue : rw Go::Queue of Go::Coroutine;
  
  has process_queue : rw Go::Queue of Go::Process;
  
  has idle_process_queue : rw Go::Queue of Go::Process;
  
  has processes_max : rw int;
  
  has machine_queue : rw Go::Queue of Go::Machine;
  
  has idle_machine_queue : rw Go::Queue of Go::Machine;
  
  has poll : rw Go::Poll;
  
  has monitor : rw Go::Monitor;
  
  static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    my $poll = Go::Poll->new;
    
    $self->{poll} = $poll;
    
    my $processes_max = 1;
    
    $self->{processes_max} = $processes_max;
    
    my $process = Go::Process->new;
    
    $self->{process_queue} = Go::Queue->new;
    
    $self->{process_queue}->enqueue($process);
    
    $self->{idle_process_queue} = Go::Queue->new;
    
    $self->{machine_queue} = Go::Queue->new;
    
    $self->{idle_machine_queue} = Go::Queue->new;
    
    for (my $i = 0; $i < $processes_max; $i++) {
      my $process = Go::Process->new;
      
      $self->process_queue->enqueue($process);
    }
    
    $self->{monitor} = Go::Monitor->new;
    
    $process->set_schedule($self);
    
    my $process_task = Go::Process::Task->new;
    
    $process_task->set_process($process);
    
    my $process_task_coroutine = Go::Coroutine->new($process_task);
    
    $process->set_task_coroutine($process_task_coroutine);
    
    {
      my $machine_process_task = Go::Machine::ProcessTask->new;
      
      $self->machine_queue->enqueue($machine_process_task);
      
      $machine_process_task->set_task($process_task);
      
      $machine_process_task->set_schedule($process->schedule);
      
      $machine_process_task->set_process($process);
    }
    
    my $machine_process_task = (Go::Machine::ProcessTask)$self->machine_queue->first;
    
    $machine_process_task->start;
    
    return $self;
  }
  
  method DESTROY : void () {
    # $machine_process_task->thread->join;
  }
  
  method schedule : void () {
    
    my $machine = (Go::Machine::ProcessTask)$self->machine_queue->first;
    
    my $process = $machine->process;
    
    my $current_coroutine = $process->current_coroutine;
    
    $process->coroutine_queue->enqueue($current_coroutine);
    
    my $process_task_coroutine = $process->task_coroutine;
    
    Go::Coroutine->transfer($current_coroutine, $process_task_coroutine);
  }
  
  method add_task : void ($task : Go::Coroutine::Task) {
    
    my $machine = (Go::Machine::ProcessTask)$self->machine_queue->first;
    
    my $process = $machine->process;
    
    my $process_task_coroutine = $process->task_coroutine;
    
    my $coroutine = Go::Coroutine->new($task, $process_task_coroutine);
    
    $process->coroutine_queue->enqueue($coroutine);
  }
}
