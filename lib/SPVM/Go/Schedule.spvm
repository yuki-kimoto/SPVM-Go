# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  allow Go;
  allow Go::Schedule::Task;
  allow Go::Channel;
  
  use Go::Coroutine;
  use List;
  use Go::Schedule::Task;
  use Sys::Time;
  use Sys::Time::Timeval;
  use Sys::Time::Timespec;
  use Go::Poll;
  use Go::Channel;
  use Go::Channel::Wait;
  
  has coroutines : List of Go::Coroutine;
  
  has current_coroutine : Go::Coroutine;
  
  has schedule_task_coroutine : Go::Coroutine;
  
  has poll : Go::Poll;
  
  private static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutines = List->new(new Go::Coroutine[0]);;
    
    $self->{coroutines} = $coroutines;
    
    $self->{poll} = Go::Poll->new;
    
    return $self;
  }
  
  method schedule_timer : int ($after : double = 0) {
    
    my $status = $self->schedule($after);
    
    return $status;
  }
  
  method schedule_io_read : int ($fd : int, $timeout : double = 0) {
    
    my $is_write = 0;
    
    my $status = $self->schedule($timeout, undef, $fd, $is_write);
    
    return $status;
  }
  
  method schedule_io_write : int ($fd : int, $timeout : double = 0) {
    
    my $is_write = 1;
    
    my $status = $self->schedule($timeout, undef, $fd, $is_write);
    
    return $status;
  }
  
  method schedule_channel_read : int ($channel : Go::Channel) {
    
    my $is_write = 0;
    
    my $status = $self->schedule(0, $channel, -1, $is_write);
    
    return $status;
  }
  
  method schedule_channel_write : int ($channel : Go::Channel, $value : object) {
    
    my $is_write = 1;
    
    my $status = $self->schedule(0, $channel, -1, $is_write, $value);
    
    return $status;
  }
  
  private method schedule : int ($after : double = 0, $channel : Go::Channel = undef, $fd : int = -1, $is_write : int = 0, $value : object = undef) {
    
    my $status = 0;
    
    my $current_coroutine = $self->{current_coroutine};
    
    if ($current_coroutine) {
      
      my $schedule_task_coroutine = $self->{schedule_task_coroutine};
      
      if ($after > 0) {
        
        my $now_tv = Sys::Time::Timeval->new;
        
        Sys::Time->gettimeofday($now_tv, undef);
        
        my $now_sec = $now_tv->tv_sec;
        
        my $now_nsec = 1000 * $now_tv->tv_sec;
        
        my $after_sec = (int)$after;
        
        my $after_nsec = (int)(($after - $after_sec) * 1_000_000_000);
        
        my $deadline_sec = $now_sec + $after_sec;
        
        my $deadline_nsec = $now_nsec + $after_nsec;
        
        if ($deadline_nsec >= 1_000_000_000) {
          $deadline_sec += 1;
          $deadline_nsec -= 1_000_000_000;
        }
        
        my $deadline_ts = Sys::Time::Timespec->new;
        
        $deadline_ts->set_tv_sec($deadline_sec);
        
        $deadline_ts->set_tv_nsec($deadline_nsec);
        
        $current_coroutine->{deadline} = $deadline_ts;
      }
      
      if ($channel) {
        my $channel_wait = Go::Channel::Wait->new;
        
        $channel_wait->{value} = $value;
        
        $current_coroutine->{disable} = 1;
        
        $channel_wait->{coroutine} = $current_coroutine;
        
        if ($is_write) {
          $channel->{write_waiters}->push($channel_wait);
        }
        else {
          $channel->{read_waiters}->push($channel_wait);
        }
      }
      elsif ($fd > -1) {
        $current_coroutine->{fd} = $fd;
      }
      
      $current_coroutine->{is_write} = (byte)$is_write;
      
      Go::Coroutine->transfer($current_coroutine, $schedule_task_coroutine);
    }
    else {
      if ($after > 0) {
        die "\$after(or \$timeout) must be given in a goroutine.";
      }
      
      my $return_back = Go::Coroutine->new;
      
      my $schedule_task = Go::Schedule::Task->new;
      
      $schedule_task->{schedule} = $self;
      
      my $schedule_task_coroutine = Go::Coroutine->new($schedule_task);
      
      $schedule_task_coroutine->{return_back} = $return_back;
      
      $self->{schedule_task_coroutine} = $schedule_task_coroutine;
      
      Go::Coroutine->transfer($return_back, $schedule_task_coroutine);
      
      $schedule_task->{schedule} = undef;
      
      $self->{schedule_task_coroutine} = undef;
      
      $self->{current_coroutine} = undef;
      
      $schedule_task = undef;
      
      $schedule_task_coroutine->{task} = undef;
    }
    
    return $status;
  }
  
  private method add_task : void ($task : Callback) {
    
    my $coroutine = Go::Coroutine->new($task);
    
    $self->{coroutines}->push($coroutine);
  }
  
}
