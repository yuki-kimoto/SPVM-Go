# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  use Go::Coroutine;
  use Go::Process;
  use Go::Machine;
  use Go::Queue;
  use Go::Process::Task;
  use Go::Machine::ProcessTask;
  
  has coroutine_queue : rw Go::Queue of Go::Coroutine;
  
  has process : rw Go::Process;
  
  has machine : rw Go::Machine;
  
  has main_coroutine : rw Go::Coroutine;
  
  static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    my $process = Go::Process->new;
    
    $self->{process} = $process;
    
    $process->set_schedule($self);
    
    my $process_task = Go::Process::Task->new;
    
    $process_task->set_process($process);
    
    my $process_task_coroutine = Go::Coroutine->new($process_task);
    
    $process->set_task_coroutine($process_task_coroutine);
    
    my $machine_process_task = Go::Machine::ProcessTask->new;
    
    $self->set_machine($machine_process_task);
    
    $machine_process_task->set_task($process_task);
    
    $machine_process_task->set_schedule($process->schedule);
    
    $machine_process_task->set_process($process);
    
    return $self;
  }
  
  method schedule : void () {
    
    my $machine = $self->machine;
    
    my $process = $machine->process;
    
    my $current_coroutine = $process->current_coroutine;
    
    if ($current_coroutine) {
      $process->coroutine_queue->enqueue($current_coroutine);
    }
    else {
      $current_coroutine = Go::Coroutine->new;
      
      my $main_coroutine = $self->main_coroutine;
      
      if ($main_coroutine) {
        die "A main coroutine already exists.";
      }
      
      $self->set_main_coroutine($current_coroutine);
    }
    
    my $process_task_coroutine = $process->task_coroutine;
    
    Go::Coroutine->transfer($current_coroutine, $process_task_coroutine);
  }
  
  method add_task : void ($task : Callback) {
    
    my $machine = $self->machine;
    
    my $process = $machine->process;
    
    my $process_task_coroutine = $process->task_coroutine;
    
    my $coroutine = Go::Coroutine->new($task, $process_task_coroutine);
    
    $process->coroutine_queue->enqueue($coroutine);
  }
}
