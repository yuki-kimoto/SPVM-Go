# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  allow Go::Process::Task;
  
  use Go::Coroutine;
  use Go::Process;
  use Go::Queue;
  use Go::Process::Task;
  
  has coroutine_queue : Go::Queue of Go::Coroutine;
  
  has current_process : Go::Process;
  
  has current_coroutine : Go::Coroutine;
  
  has task_coroutine : Go::Coroutine;
  
  static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    my $process = Go::Process->new;
    
    $process->{schedule} = $self;
    
    my $process_task = Go::Process::Task->new;
    
    $process_task->{process} = $process;
    
    my $process_task_coroutine = Go::Coroutine->new($process_task);
    
    $self->{task_coroutine} = $process_task_coroutine;
    
    $self->{current_process} = $process;
    
    return $self;
  }
  
  method schedule : void () {
    
    my $process = $self->{current_process};
    
    my $current_coroutine = $self->{current_coroutine};
    
    if ($current_coroutine) {
      $self->{coroutine_queue}->enqueue($current_coroutine);
    }
    else {
      $current_coroutine = Go::Coroutine->new;
      
      my $return_back = $process->{return_back};
      
      if ($return_back) {
        die "A return back already exists.";
      }
      
      $process->{return_back} = $current_coroutine;
    }
    
    my $process_task_coroutine = $self->{task_coroutine};
    
    Go::Coroutine->transfer($current_coroutine, $process_task_coroutine);
    
    $self->{current_coroutine} = undef;
    
  }
  
  method add_task : void ($task : Callback) {
    
    my $process = $self->{current_process};
    
    my $process_task_coroutine = $self->{task_coroutine};
    
    my $coroutine = Go::Coroutine->new($task, $process_task_coroutine);
    
    $self->{coroutine_queue}->enqueue($coroutine);
  }
  
  method DESTROY : void () {
    warn "DESTROY";
  }
}
