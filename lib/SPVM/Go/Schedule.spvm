# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  use Go::Coroutine;
  use Go::Schedule::Process;
  use Go::Schedule::Thread;
  use Go::Queue;
  use Go::IOPoll;
  
  has wait_coroutine_queue : Go::Queue of Go::Coroutine;
  
  has idle_process_queue : Go::Queue of Go::Schedule::Process;
  
  has idle_thread_queue : Go::Queue of Go::Thread;
  
  has io_poll : Go::IOPoll;
  
  has schedule_coroutine : rw Go::Coroutine;
  
  has current_coroutine : rw Go::Coroutine;
  
  static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $wait_coroutine_queue = Go::Queue->new;
    
    $self->{wait_coroutine_queue} = $wait_coroutine_queue;
    
    my $io_poll = Go::IOPoll->new;
    
    $self->{io_poll} = $io_poll;
    
    my $schedule_coroutine = $self->create_schedule_coroutine;
    
    $self->{schedule_coroutine} = $schedule_coroutine;
    
    return $self;
  }
  
  method create_schedule_coroutine : Go::Coroutine () {
  
    my $schedule_callback : Callback;
    
    $schedule_callback =
      [has wait_coroutine_queue : Go::Queue of Go::Coroutine = $self->{wait_coroutine_queue}]
      method : void () {
      while (1) {
        my $wait_coroutine_queue = $self->{wait_coroutine_queue};
        
        my $wait_coroutine = $wait_coroutine_queue->dequeue;
        
        if ($wait_coroutine) {
          
        }
        else {
          
        }
      }
    };
    
    my $schedule_coroutine = Go::Coroutine->new($schedule_callback);
    
    return $schedule_coroutine;
  }
  
  # Instance Methods
  method enqueue_coroutine : void ($coroutine : Go::Coroutine) {
    
    my $wait_coroutine_queue = $self->{wait_coroutine_queue};
    
    $wait_coroutine_queue->enqueue($coroutine);
  }
  
  method dequeue_coroutine : Go::Coroutine () {
    
    my $wait_coroutine_queue = $self->{wait_coroutine_queue};
    
    my $coroutine = $wait_coroutine_queue->dequeue;
    
    return (Go::Coroutine)$coroutine;
  }
  
  method schedule : void () {
    
    my $schedule_coroutine = $self->{schedule_coroutine};
    
    my $schedule_coroutine_callback = $schedule_coroutine->{callback};
    
    $schedule_coroutine_callback->();
  }
}
