# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Schedule {
  allow Go::Schedule::Task;
  
  use Go::Coroutine;
  use Go::Queue;
  use Go::Schedule::Task;
  
  has coroutine_queue : Go::Queue of Go::Coroutine;
  
  has current_coroutine : Go::Coroutine;
  
  has schedule_task_coroutine : Go::Coroutine;
  
  has return_back : Go::Coroutine;
  
  static method new : Go::Schedule () {
    
    my $self = new Go::Schedule;
    
    my $coroutine_queue = Go::Queue->new;
    
    $self->{coroutine_queue} = $coroutine_queue;
    
    my $schedule_task = Go::Schedule::Task->new;
    
    $schedule_task->{schedule} = $self;
    
    my $schedule_task_coroutine = Go::Coroutine->new($schedule_task);
    
    $self->{schedule_task_coroutine} = $schedule_task_coroutine;
    
    return $self;
  }
  
  method schedule : void () {
    
    my $current_coroutine = $self->{current_coroutine};
    
    if ($current_coroutine) {
      $self->{coroutine_queue}->enqueue($current_coroutine);
      
      my $schedule_task_coroutine = $self->{schedule_task_coroutine};
      
      $current_coroutine->{return_back} = $self->{schedule_task_coroutine};
      
      Go::Coroutine->transfer($current_coroutine, $schedule_task_coroutine);
    }
    else {
      my $return_back = Go::Coroutine->new;
      
      $self->{return_back} = $return_back;
      
      $current_coroutine = $return_back;
      
      my $schedule_task_coroutine = $self->{schedule_task_coroutine};
      
      $current_coroutine->{return_back} = $self->{schedule_task_coroutine};
      
      Go::Coroutine->transfer($current_coroutine, $schedule_task_coroutine);
    }
  }
  
  method add_task : void ($task : Callback) {
    
    my $coroutine = Go::Coroutine->new($task);
    
    $self->{coroutine_queue}->enqueue($coroutine);
  }
  
  method DESTROY : void () {
    warn "DESTROY";
  }
}
