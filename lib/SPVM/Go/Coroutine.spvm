# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go::Coroutine : pointer {
  allow Go::Poll;
  allow Go::Schedule;
  allow Go::Schedule::Task;
  
  use Callback;
  
  use Sys::Time::Timespec;
  
  use Native::Stack;
  
  use Native;
  
  use Go::Channel;
  
  # Fields
  has return_back : Go::Coroutine;
  
  has task : Callback;
  
  has finished : byte;
  
  has deadline : Sys::Time::Timespec;
  
  has fd : int;
  
  has is_write : byte;
  
  has poll_index : int;
  
  has stack : Native::Stack;
  
  has channels_h : Hash of Go::Channel;
  
  # Class Methods
  static method new : Go::Coroutine ($task :  Callback = undef, $return_back : Go::Coroutine = undef) {
    
    my $self = new Go::Coroutine;
    
    $self->{task} = $task;
    
    $self->{return_back} = $return_back;
    
    my $env = Native->get_current_env;
    
    $self->{stack} = $env->new_stack;
    
    $self->init_coroutine;
    
    $self->{fd} = -1;
    
    $self->{channels_h} = Hash->new;
    
    return $self;
  }
  
  native static method transfer : void ($from : Go::Coroutine, $to : Go::Coroutine);
  
  # Instance Methods
  native private method init_coroutine : void ();
  
  native method DESTROY : void ();
}
