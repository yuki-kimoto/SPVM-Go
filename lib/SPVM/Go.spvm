# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go {
  version "0.001";
  
  use Go::Coroutine;
  use Go::Coroutine::Task;
  use Go::Channel::ReadCallback;
  use Go::Channel;
  use Go::Schedule;
  
  our $GO : Go;
  
  has schedule : rw Go::Schedule;
  
  INIT {
    $GO = new Go;
  }
  
  method go : void ($cb : Go::Coroutine::Task) {
    
  }
  
  method make : Go::Channel ($length : int = 0) {
    
  }
  
  method read : object () {
    
  }
  
  method write : void ($data : object) {
    
  }
  
  method select : void ($cases : object[], $default : Go::Channel::ReadCallback = undef) {
    
  }
  
  method gosched : void () {
    my $schedule = $self->{schedule};
    
    my $machine = (Go::Machine::ProcessTask)$schedule->machine_queue->first;
    
    my $process = $machine->process;
    
    my $current_coroutine = $process->current_coroutine;
    
    $process->coroutine_queue->enqueue($current_coroutine);
    
    my $process_task_coroutine = $process->task_coroutine;
    
    Go::Coroutine->transfer($current_coroutine, $process_task_coroutine);
  }
  
}

