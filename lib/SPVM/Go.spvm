# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go {
  version "0.001";
  
  use Go::Coroutine;
  use Go::Coroutine::Task;
  use Go::Channel::ReadCallback;
  use Go::Channel;
  use Go::Schedule;
  
  has schedule : Go::Schedule;
  
  has process : rw Go::Process;
  
  static method new : Go () {
    
    my $self = new Go;
    
    $self->init;
    
    return $self;
  }
  
  method init : void () {
    
    my $schedule = Go::Schedule->new;
    
    my $process = (Go::Process)$schedule->process_queue->first;
    
    $process->set_schedule($schedule);
    
    $self->{process} = $process;
    
    my $process_task = Go::Process::Task->new;
    
    $process_task->set_process($process);
    
    my $process_task_coroutine = Go::Coroutine->new($process_task);
    
    $process->set_task_coroutine($process_task_coroutine);
    
  }
  
  method go : void ($cb : Go::Coroutine::Task) {
    
  }
  
  method make : Go::Channel ($length : int = 0) {
    
  }
  
  method read : object () {
    
  }
  
  method write : void ($data : object) {
    
  }
  
  method select : void ($cases : object[], $default : Go::Channel::ReadCallback = undef) {
    
  }
  
  method gosched : void () {
    
  }
  
}

