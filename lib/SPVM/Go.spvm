# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go {
  version "0.001";
  
  use Go::Channel;
  use Go::Schedule;
  use Callback;
  
  our $GO : Go;
  
  has schedule : Go::Schedule;
  
  INIT {
    my $go = new Go;
    
    my $schedule = Go::Schedule->new;
    
    $go->{schedule} = $schedule;
    
    $GO = $go;
  }
  
  static method go : void ($task : Callback) {
    
    my $schedule = $GO->{schedule};
    
    $schedule->add_task($task);
  }
  
  static method make : Go::Channel ($capacity : int = 0) {
    
    my $channel = Go::Channel->new({capacity => $capacity});
    
    return $channel;
  }
  
  static method read : object () {
    
  }
  
  static method write : void ($data : object) {
    
  }
  
  static method gosched : int () {
    
    my $schedule = $GO->{schedule};
    
    my $status = $schedule->schedule;
    
    return $status;
  }
  
  static method sleep : int ($seconds : double = 0) {
    
    my $schedule = $GO->{schedule};
    
    my $status = $schedule->schedule($seconds);
    
    return $status;
  }
  
  static method gosched_io_read : int ($fd : int, $timeout : double = 0) {
    
    my $schedule = $GO->{schedule};
    
    my $status = $schedule->schedule_io_read($fd, $timeout);
    
    return $status;
  }
  
  static method gosched_io_write : int ($fd : int, $timeout : double = 0) {
    
    my $schedule = $GO->{schedule};
    
    my $status = $schedule->schedule_io_write($fd, $timeout);
    
    return $status;
  }
  
  static method gosched_channel_read : int ($channel : Go::Channel) {
    
    my $schedule = $GO->{schedule};
    
    my $status = $schedule->schedule_channel_read($channel);
    
    return $status;
  }
  
  static method gosched_channel_write : int ($channel : Go::Channel, $value : object) {
    
    my $schedule = $GO->{schedule};
    
    my $status = $schedule->schedule_channel_write($channel, $value);
    
    return $status;
  }
  
  method DESTROY : void () {
    
    my $schedule = $self->{schedule};
    
  }
}

