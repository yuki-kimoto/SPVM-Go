# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go {
  version "0.001";
  
  use Go;
  use Go::Coroutine;
  use Go::Coroutine::Task;
  use Go::Channel::ReadCallback;
  use Go::Channel;
  use Go::Schedule;
  
  our $GO : rw Go;
  
  has schedule : rw Go::Schedule;
  
  INIT {
    my $go = new Go;
    
    my $schedule = Go::Schedule->new;
    
    my $process = (Go::Process)$schedule->process_queue->first;
    
    $process->set_schedule($schedule);
    
    my $process_task = Go::Process::Task->new;
    
    $process_task->set_process($process);
    
    my $process_task_coroutine = Go::Coroutine->new($process_task);
    
    $process->set_task_coroutine($process_task_coroutine);
    
    {
      my $machine_process_task = Go::Machine::ProcessTask->new;
      
      $schedule->machine_queue->enqueue($machine_process_task);
      
      $machine_process_task->set_task($process_task);
      
      $machine_process_task->set_schedule($process->schedule);
      
      $machine_process_task->set_process($process);
    }
    
    $go->set_schedule($schedule);
    
    $GO = $go;
    
    my $machine_process_task = (Go::Machine::ProcessTask)$schedule->machine_queue->first;
    
    $machine_process_task->start;
    
  }
  
  static method go : void ($task : Go::Coroutine::Task) {
    
    my $schedule = $GO->{schedule};
    
    my $machine = (Go::Machine::ProcessTask)$schedule->machine_queue->first;
    
    my $process = $machine->process;
    
    my $process_task_coroutine = $process->task_coroutine;
    
    my $coroutine = Go::Coroutine->new($task, $process_task_coroutine);
    
    $process->coroutine_queue->enqueue($coroutine);
  }
  
  static method make : Go::Channel ($length : int = 0) {
    
  }
  
  static method read : object () {
    
  }
  
  static method write : void ($data : object) {
    
  }
  
  static method select : void ($cases : object[], $default : Go::Channel::ReadCallback = undef) {
    
  }
  
  static method gosched : void () {
    my $schedule = $GO->{schedule};
    
    my $machine = (Go::Machine::ProcessTask)$schedule->machine_queue->first;
    
    my $process = $machine->process;
    
    my $current_coroutine = $process->current_coroutine;
    
    $process->coroutine_queue->enqueue($current_coroutine);
    
    my $process_task_coroutine = $process->task_coroutine;
    
    Go::Coroutine->transfer($current_coroutine, $process_task_coroutine);
  }
  
  method DESTROY : void () {
    
    $self->schedule->set_finished(1);
    
    $self->schedule->machine_queue->first->(Go::Machine::ProcessTask)->thread->join;
    
  }
}

