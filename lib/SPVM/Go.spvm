# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Go {
  version "0.001";
  
  use Go;
  use Go::Coroutine;
  use Go::Coroutine::Task;
  use Go::Channel::ReadCallback;
  use Go::Channel;
  use Go::Schedule;
  use Go::Machine::ProcessTask;
  use Go::Process::Task;
  
  our $GO : rw Go;
  
  has schedule : rw Go::Schedule;
  
  INIT {
    my $go = new Go;
    
    my $schedule = Go::Schedule->new;
    
    $go->set_schedule($schedule);
    
    $GO = $go;
  }
  
  static method go : void ($task : Go::Coroutine::Task) {
    
    my $schedule = $GO->{schedule};
    
    my $machine = (Go::Machine::ProcessTask)$schedule->machine_queue->first;
    
    my $process = $machine->process;
    
    my $process_task_coroutine = $process->task_coroutine;
    
    my $coroutine = Go::Coroutine->new($task, $process_task_coroutine);
    
    $process->coroutine_queue->enqueue($coroutine);
  }
  
  static method make : Go::Channel ($length : int = 0) {
    
  }
  
  static method read : object () {
    
  }
  
  static method write : void ($data : object) {
    
  }
  
  static method select : void ($cases : object[], $default : Go::Channel::ReadCallback = undef) {
    
  }
  
  static method gosched : void () {
    
    my $schedule = $GO->{schedule};
    
    $schedule->schedule;
  }
  
  method DESTROY : void () {
    
    $self->schedule->set_finished(1);
    
    $self->schedule->machine_queue->first->(Go::Machine::ProcessTask)->thread->join;
    
  }
}

