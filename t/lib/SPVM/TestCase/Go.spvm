class TestCase::Go {
  use Go;
  
  use Go::Schedule;
  use Go::Schedule::Machine;
  use Go::Schedule::Callback;
  use Go::Coroutine;
  
  static method test_schedule : int () {
    
    my $schedule = Go::Schedule->new;
    
    my $machine = Go::Schedule::Machine->new;
    
    my $process = (Go::Schedule::Process)$schedule->process_queue->first;
    
    $process->set_schedule($schedule);
    
    $machine->set_process($process);
    
    my $schedule_coroutine_callback = Go::Schedule::Callback->new;
    $schedule_coroutine_callback->set_machine($machine);
    
    my $schedule_coroutine = Go::Coroutine->new($schedule_coroutine_callback);
    
    $process->set_schedule_coroutine($schedule_coroutine);
    
    my $coroutine0 = (Go::Coroutine)undef;
    
    $coroutine0 = Go::Coroutine->new([has machine : Go::Schedule::Machine = $machine] method : void () {
      
      my $machine = $self->{machine};
      
      my $process = $machine->process;
      
      my $shcedule = $process->schedule;
      
      my $schedule_coroutine = $process->schedule_coroutine;
      
      # die "Foo";
      
      warn("G1-A");
      
      warn("G1-CallMethodStart");
      TestCase::Go->foo();
      warn("G1-CallMethodEnd");
      
      my $current_coroutine = $machine->coroutine;
      $shcedule->coroutine_queue->enqueue($current_coroutine);
      Go::Coroutine->transfer($current_coroutine, $schedule_coroutine);
      
      warn("G1-B");
    }, $schedule_coroutine);
    
    $schedule->coroutine_queue->enqueue($coroutine0);
    
    $process->start_schedule;
    
    if ($coroutine0->exception) {
      die $coroutine0->exception;
    }
    warn("END");
    
    return 1;
  }
  
  static method test : int () {
    
    my $coroutine_start_callback_ref = [(Callback)undef];
    
    my $coroutines = new Go::Coroutine[10];
      
    $coroutine_start_callback_ref->[0] = [has coroutines : Go::Coroutine[] = $coroutines, has coroutine_start_callback_ref : Callback[] = $coroutine_start_callback_ref] method : void () {
      
      # die "Foo";
      
      my $coroutines = $self->{coroutines};
      
      my $coroutine_start_callback = $self->{coroutine_start_callback_ref}->[0];
      my $coroutine_start = Go::Coroutine->new($coroutine_start_callback);
      $coroutines->[0] = $coroutine_start;
      
      my $coroutine1 = (Go::Coroutine)undef;
      
      $coroutine1 = Go::Coroutine->new([has coroutines : Go::Coroutine[] = $coroutines] method : void () {
        
        # die "Foo";
        
        warn("G1-A");
        
        warn("G1-CallMethodStart");
        TestCase::Go->foo();
        warn("G1-CallMethodEnd");
        
        Go::Coroutine->transfer($self->{coroutines}[1], $self->{coroutines}[0]);
        
        warn("G1-B");
      }, $coroutine_start);
      
      $coroutines->[1] = $coroutine1;
      
      warn("G0-A");
      
      Go::Coroutine->transfer($coroutines->[0], $coroutines->[1]);
      
      if ($coroutines->[1]->exception) {
        die $coroutines->[1]->exception;
      }
      
      warn("G0-B");
      
      Go::Coroutine->transfer($coroutines->[0], $coroutines->[1]);
      
      if ($coroutines->[1]->exception) {
        die $coroutines->[1]->exception;
      }
      
      warn("G0-C");
      
    };
    
    $coroutine_start_callback_ref->[0]->();
    
    if ($coroutines->[0]->exception) {
      die $coroutines->[0]->exception;
    }
    warn("END");
    
    return 1;
  }
  
  static method foo : void () {
    warn "G1-CallMethod";
  }
}
