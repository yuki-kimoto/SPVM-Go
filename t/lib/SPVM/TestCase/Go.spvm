class TestCase::Go {
  use Go;
  
  use Go::Schedule;
  use Go::Goroutine;
  
  static method test_schedule : int () {
    
    my $schedule = Go::Schedule->new;
    
    my $goroutine_schedule_callback = (Callback)undef;
    
    my $goroutine_schedule_ref = [(Go::Goroutine)undef];
    
    $goroutine_schedule_callback = [has schedule : Go::Schedule = $schedule] method : void () {
      
      my $shcedule = $self->{schedule};
      
      my $goroutine_schedule = $shcedule->schedule_goroutine;
      
      # die "Foo";
      
      while (1) {
        
        my $goroutine = $shcedule->dequeue_goroutine;
        
        $shcedule->set_current_goroutine($goroutine);
        
        if ($goroutine) {
          warn("[Start]Transfer Schedule to other");
          
          Go::Goroutine->transfer($goroutine_schedule, $goroutine);
          
          warn("[End]Transfer Schedule to other");
        }
        else {
          last;
        }
      }
    };
    
    my $goroutine_schedule = Go::Goroutine->new($goroutine_schedule_callback);
    $goroutine_schedule_ref->[0] = $goroutine_schedule;
    
    $schedule->set_schedule_goroutine($goroutine_schedule);
    
    my $goroutine0 = (Go::Goroutine)undef;
    
    $goroutine0 = Go::Goroutine->new([has schedule : Go::Schedule = $schedule] method : void () {
      
      my $shcedule = $self->{schedule};
      
      my $goroutine_schedule = $shcedule->schedule_goroutine;
      
      # die "Foo";
      
      warn("G1-A");
      
      warn("G1-CallMethodStart");
      TestCase::Go->foo();
      warn("G1-CallMethodEnd");
      
      my $current_goroutine = $shcedule->current_goroutine;
      $shcedule->enqueue_goroutine($current_goroutine);
      Go::Goroutine->transfer($current_goroutine, $goroutine_schedule);
      
      warn("G1-B");
    }, $goroutine_schedule);
    
    $schedule->enqueue_goroutine($goroutine0);
    
    $goroutine_schedule_callback->();
    
    if ($goroutine0->exception) {
      die $goroutine0->exception;
    }
    warn("END");
    
    return 1;
  }
  
  static method test : int () {
    
    my $goroutine_start_callback_ref = [(Callback)undef];
    
    my $goroutines = new Go::Goroutine[10];
      
    $goroutine_start_callback_ref->[0] = [has goroutines : Go::Goroutine[] = $goroutines, has goroutine_start_callback_ref : Callback[] = $goroutine_start_callback_ref] method : void () {
      
      # die "Foo";
      
      my $goroutines = $self->{goroutines};
      
      my $goroutine_start_callback = $self->{goroutine_start_callback_ref}->[0];
      my $goroutine_start = Go::Goroutine->new($goroutine_start_callback);
      $goroutines->[0] = $goroutine_start;
      
      my $goroutine1 = (Go::Goroutine)undef;
      
      $goroutine1 = Go::Goroutine->new([has goroutines : Go::Goroutine[] = $goroutines] method : void () {
        
        # die "Foo";
        
        warn("G1-A");
        
        warn("G1-CallMethodStart");
        TestCase::Go->foo();
        warn("G1-CallMethodEnd");
        
        Go::Goroutine->transfer($self->{goroutines}[1], $self->{goroutines}[0]);
        
        warn("G1-B");
      }, $goroutine_start);
      
      $goroutines->[1] = $goroutine1;
      
      warn("G0-A");
      
      Go::Goroutine->transfer($goroutines->[0], $goroutines->[1]);
      
      if ($goroutines->[1]->exception) {
        die $goroutines->[1]->exception;
      }
      
      warn("G0-B");
      
      Go::Goroutine->transfer($goroutines->[0], $goroutines->[1]);
      
      if ($goroutines->[1]->exception) {
        die $goroutines->[1]->exception;
      }
      
      warn("G0-C");
      
    };
    
    $goroutine_start_callback_ref->[0]->();
    
    if ($goroutines->[0]->exception) {
      die $goroutines->[0]->exception;
    }
    warn("END");
    
    return 1;
  }
  
  static method foo : void () {
    warn "G1-CallMethod";
  }
}
