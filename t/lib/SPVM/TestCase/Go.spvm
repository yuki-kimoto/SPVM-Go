class TestCase::Go {
  use Go;
  
  use Go::Schedule;
  use Go::Goroutine;
  
  static method test : int () {
    
    my $goroutine_start_callback_ref = [(Callback)undef];
    
    $goroutine_start_callback_ref->[0] = [has goroutine_start_callback_ref : Callback[] = $goroutine_start_callback_ref] method : void () {
      
      my $goroutines = new Go::Goroutine[10];
      
      my $goroutine_start_callback = $self->{goroutine_start_callback_ref}->[0];
      my $goroutine_start = Go::Goroutine->new($goroutine_start_callback);
      $goroutines->[0] = $goroutine_start;
      
      my $goroutine1 = (Go::Goroutine)undef;
      
      $goroutine1 = Go::Goroutine->new([has goroutines : Go::Goroutine[] = $goroutines] method : void () {
        warn("G1-A");
        
        warn("G1-CallMethodStart");
        TestCase::Go->foo();
        warn("G1-CallMethodEnd");
        
        Go::Goroutine->transfer($self->{goroutines}[1], $self->{goroutines}[0]);
        
        warn("G1-B");
      }, $goroutine_start);
      
      $goroutines->[1] = $goroutine1;
      
      warn("G0-A");
      
      Go::Goroutine->transfer($goroutines->[0], $goroutines->[1]);
      
      warn("G0-B");
      
      Go::Goroutine->transfer($goroutines->[0], $goroutines->[1]);
      
      warn("G0-C");
      
    };
    
    $goroutine_start_callback_ref->[0]->();
    
    return 1;
  }
  
  static method foo : void () {
    warn "G1-CallMethod";
  }
}
