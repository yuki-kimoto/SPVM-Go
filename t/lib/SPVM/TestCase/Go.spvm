class TestCase::Go {
  use Go;
  
  use Go::Schedule;
  use Go::Goroutine;
  
  static method test : int () {
    
    my $goroutines = new Go::Goroutine[10];
    
    my $goroutine_return_back = Go::Goroutine->new;
    $goroutines->[0] = $goroutine_return_back;
    
    my $goroutine1 = (Go::Goroutine)undef;
    
    my $goroutine2 = (Go::Goroutine)undef;
    
    $goroutine1 = Go::Goroutine->new([has goroutines : Go::Goroutine[] = $goroutines] method : void () {
      warn("G1-0");
      Go::Goroutine->transfer($self->{goroutines}[1], $self->{goroutines}[2]);
      warn("G1-1");
    }, $goroutine_return_back);
    
    $goroutines->[1] = $goroutine1;
    
    $goroutine2 = Go::Goroutine->new([has goroutines : Go::Goroutine[] = $goroutines] method : void () {
      warn("G2-0");
      Go::Goroutine->transfer($self->{goroutines}[2], $self->{goroutines}[1]);
    }, $goroutine_return_back);
    
    $goroutines->[2] = $goroutine2;
    
    Go::Goroutine->transfer($goroutines->[0], $goroutines->[1]);
    
    Go::Goroutine->transfer($goroutines->[0], $goroutines->[2]);
    
    warn("DESTROY");
    
    $goroutines->[0] = undef;
    $goroutines->[1] = undef;
    $goroutines->[2] = undef;
    
    $goroutine_return_back = undef;
    
    $goroutine1 = undef;
    
    $goroutine2 = undef;
    
    warn("END");
    
    return 1;
  }
}
