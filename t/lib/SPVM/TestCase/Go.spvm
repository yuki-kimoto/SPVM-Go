class TestCase::Go {
  use Go;
  
  use Go::Schedule;
  use Go::Goroutine;
  
  static method test : int () {
    
    my $goroutine_start_callback_ref = [(Callback)undef];
    
    $goroutine_start_callback_ref->[0] = [has goroutine_start_callback_ref : Callback[] = $goroutine_start_callback_ref] method : void () {
      
      my $goroutines = new Go::Goroutine[10];
      
      my $goroutine_start_callback = $self->{goroutine_start_callback_ref}->[0];
      my $goroutine_start = Go::Goroutine->new($goroutine_start_callback);
      $goroutines->[0] = $goroutine_start;
      
      my $goroutine1 = (Go::Goroutine)undef;
      
      my $goroutine2 = (Go::Goroutine)undef;
      
      $goroutine1 = Go::Goroutine->new([has goroutines : Go::Goroutine[] = $goroutines] method : void () {
        warn("G1-A");
        Go::Goroutine->transfer($self->{goroutines}[1], $self->{goroutines}[2]);
        warn("G1-B");
      }, $goroutine_start);
      
      $goroutines->[1] = $goroutine1;
      
      $goroutine2 = Go::Goroutine->new([has goroutines : Go::Goroutine[] = $goroutines] method : void () {
        warn("G2-A");
        Go::Goroutine->transfer($self->{goroutines}[2], $self->{goroutines}[1]);
        warn("G2-B");
      }, $goroutine_start);
      
      $goroutines->[2] = $goroutine2;
      
      Go::Goroutine->transfer($goroutines->[0], $goroutines->[1]);
      
      Go::Goroutine->transfer($goroutines->[0], $goroutines->[2]);
      
      warn("DESTROY");

=pod

      $goroutines->[0] = undef;
      $goroutines->[1] = undef;
      $goroutines->[2] = undef;
      
      $goroutine_start = undef;
      
      $goroutine1 = undef;
      
      $goroutine2 = undef;

=cut

      warn("END");
    };
    
    $goroutine_start_callback_ref->[0]->();
    
    return 1;
  }
}
