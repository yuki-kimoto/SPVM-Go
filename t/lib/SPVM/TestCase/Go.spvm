class TestCase::Go {
  use Go;
  use Sys;
  use Go::Sync::WaitGroup;
  
  static method go : int () {
    
    Go->go(method : void () {});
    
    Go->gosched;
    
    Go->go(method : void () {
      my $wg = Go::Sync::WaitGroup->new;
      
      $wg->add(2);
      
      Go->go([has wg : Go::Sync::WaitGroup = $wg] method : void () {
        
        # die "Foo";
        
        warn("G0-A");
        
        warn("G0-CallMethodStart");
        TestCase::Go->foo();
        warn("G0-CallMethodEnd");
        
        Go->gosched;
        
        warn("G0-B");
        
        $self->{wg}->done;
      });
      
      Go->go([has wg : Go::Sync::WaitGroup = $wg] method : void () {
        
        # die "Foo";
        
        warn("G1-A");
        
        warn("G1-CallMethodStart");
        TestCase::Go->foo();
        warn("G1-CallMethodEnd");
        
        Go->gosched;
        
        warn("G1-B");
        
        $self->{wg}->done;
      });
      
      $wg->wait;
      
      warn("Wait");
    });
    
    Go->gosched;
    
    return 1;
  }
  
  static method foo : void () {
    warn "G1-CallMethod";
  }
}
