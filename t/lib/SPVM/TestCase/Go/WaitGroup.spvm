class TestCase::Go::WaitGroup {
  use Go;
  use Go::Sync::WaitGroup;
  
  our $RESULT : IntList;
  
  static method basic : int () {
    
    $TestCase::Go::WaitGroup::RESULT = IntList->new;
    
    Go->go(method : void () {
      my $wg = Go::Sync::WaitGroup->new;
      
      $wg->add(2);
      
      Go->go([has wg : Go::Sync::WaitGroup = $wg] method : void () {
        
        Fn->defer([has wg : Go::Sync::WaitGroup = $self->{wg}] method : void () {
          $self->{wg}->done;
        });
        
        $TestCase::Go::WaitGroup::RESULT->push(2);
        
      });
      
      Go->go([has wg : Go::Sync::WaitGroup = $wg] method : void () {
        Fn->defer([has wg : Go::Sync::WaitGroup = $self->{wg}] method : void () {
          $self->{wg}->done;
        });
        
        $TestCase::Go::WaitGroup::RESULT->push(3);
      });
      
      $TestCase::Go::WaitGroup::RESULT->push(1);
      
      $wg->wait;
      
      $TestCase::Go::WaitGroup::RESULT->push(4);
    });
    
    Go->gosched;
    
    unless (Array->equals_int($TestCase::Go::WaitGroup::RESULT->to_array, [1, 2, 3, 4])) {
      return 0;
    }
    
    $TestCase::Go::WaitGroup::RESULT = undef;
    
    return 1;
  }
}
