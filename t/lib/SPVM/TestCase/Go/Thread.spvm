class TestCase::Go::Thread {
  use Go::Thread;
  use Sys::Process;
  
  our $VALUE : public int;
  
  our $VALUES : public int[];
  
  static method test : int () {
    
    $TestCase::Go::Thread::VALUE = 0;
    
    $TestCase::Go::Thread::VALUES = [0, 0];
    
    my $values = [0, 0];
    
    my $thread = Go::Thread->new([has foo : int[] = $values] method : void () {
      
      $TestCase::Go::Thread::VALUE = 1;
      
      $TestCase::Go::Thread::VALUES->[0] = 2;
      
      $self->{foo}[0] = 5;
    });
    
    my $thread2 = Go::Thread->new([has foo : int[] = $values] method : void () {
      
      $TestCase::Go::Thread::VALUES->[1] = 3;
      
      $self->{foo}[1] = 7;
    });
    
    $thread->join;
    $thread2->join;
    
    warn "\$VALUE: $VALUE";
    unless ($VALUE == 1) {
      return 0;
    }
    
    warn "\$VALUES->[0]: $VALUES->[0]";
    unless ($VALUES->[0] == 2) {
      return 0;
    }
    
    warn "\$VALUES->[1]: $VALUES->[1]";
    unless ($VALUES->[1] == 3) {
      return 0;
    }
    
    warn "\$values->[0]: $values->[0]";
    unless ($values->[0] == 5) {
      return 0;
    }
    
    warn "\$values->[1]: $values->[1]";
    unless ($values->[1] == 7) {
      return 0;
    }
    
    return 1;
  }
}
