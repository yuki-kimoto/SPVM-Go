class TestCase::Go::Sync::WaitGroup {
  use Go;
  use Go::Sync::WaitGroup;
  use Thread;
  use Sys;
  
  our $RESULT : IntList;
  
  static method basic : int () {
    
    $RESULT = IntList->new;
    
    Go->go(method : void () {
      my $wg = Go::Sync::WaitGroup->new;
      
      $wg->add(2);
      
      Go->go([$wg : Go::Sync::WaitGroup] method : void () {
        
        Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
          $wg->done;
        });
        
        $RESULT->push(2);
        
      });
      
      Go->go([$wg : Go::Sync::WaitGroup] method : void () {
        Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
          $wg->done;
        });
        
        $RESULT->push(3);
      });
      
      $RESULT->push(1);
      
      $wg->wait;
      
      $RESULT->push(4);
    });
    
    Go->gosched;
    
    unless (Array->equals_int($RESULT->to_array, [1, 2, 3, 4])) {
      return 0;
    }
    
    $RESULT = undef;
    
    return 1;
  }
  
  static method thread_safe : int () {
    
    my $results = new int[2];
    
    Go->go([$results : int[]] method : void () {
      my $wg = Go::Sync::WaitGroup->new;
      
      $wg->add(2);
      
      my $thread0 = Thread->new([$wg : Go::Sync::WaitGroup, $results : int[]] method : void () {
        Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
          $wg->done;
        });
        
        Sys->sleep(1);
        
        $results->[0] = 1;
      });
      
      my $thread1 = Thread->new([$wg : Go::Sync::WaitGroup, $results : int[]] method : void () {
        Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
          $wg->done;
        });
        
        $results->[1] = 2;
      });
      
      $wg->wait;
      
      $thread0->join;
      $thread1->join;
      
    });
    
    Go->go(method : void () {
      my $wg = Go::Sync::WaitGroup->new;
      
      my $threads_list = List->new(new Thread[0]);
      
      $wg->add(400);
      
      for (my $i = 0; $i < 100; $i++) {
        Go->go([$wg : Go::Sync::WaitGroup] method : void () {
          Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
            $wg->done;
          });
          
        });
      }
      
      for (my $i = 0; $i < 100; $i++) {
        my $thread = Thread->new([$wg : Go::Sync::WaitGroup] method : void () {
          Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
            $wg->done;
          });
        });
        
        $threads_list->push($thread);
      }
      
      for (my $i = 0; $i < 100; $i++) {
        Go->go([$wg : Go::Sync::WaitGroup] method : void () {
          Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
            $wg->done;
          });
          
        });
      }
      
      for (my $i = 0; $i < 100; $i++) {
        my $thread = Thread->new([$wg : Go::Sync::WaitGroup] method : void () {
          Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
            $wg->done;
          });
        });
        $threads_list->push($thread);
      }
      
      $wg->wait;
      
      for (my $i = 0; $i < $threads_list->length; $i++) {
        my $thread = (Thread)$threads_list->get($i);
        $thread->join;
      }
      
    });
    
    Go->gosched;
    
    unless (Array->equals_int($results, [1, 2])) {
      return 0;
    }
    
    return 1;
  }
}
