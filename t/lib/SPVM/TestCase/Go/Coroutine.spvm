class TestCase::Go::Coroutine {
  use Go::Coroutine;
  use Callback;
  use Point;
  
  static method transfer_minimal : int () {
    
    my $coroutine_return_back = Go::Coroutine->new;
    
    my $coroutine = Go::Coroutine->new(method : void () {
      warn;
    }, $coroutine_return_back);
    
    warn;
    
    Go::Coroutine->transfer($coroutine_return_back, $coroutine);
    
    warn;
    
    $coroutine = undef;
    
    $coroutine_return_back = undef;
    
    return 1;
  }
  
  static method transfer_create_many_objects : int () {
    
    my $coroutine_return_back = Go::Coroutine->new;
    
    my $coroutine = Go::Coroutine->new(method : void () {
      warn;
      
      for (my $i = 0; $i < 100; $i++) {
        my $point = Point->new;
      }
      
      warn;
    }, $coroutine_return_back);
    
    warn;
    
    Go::Coroutine->transfer($coroutine_return_back, $coroutine);
    
    warn;
    
    $coroutine = undef;
    
    $coroutine_return_back = undef;
    
    return 1;
  }
  
  static method transfer : int () {
    
    my $coroutines = new Go::Coroutine[2];
    
    my $coroutine_return_back = Go::Coroutine->new;
    
    my $coroutine0 = Go::Coroutine->new([has coroutines : Go::Coroutine[] = $coroutines] method : void () {
      
      # die "Foo";
      
      my $coroutines = $self->{coroutines};
      
      my $coroutine1 = Go::Coroutine->new([has coroutines : Go::Coroutine[] = $coroutines] method : void () {
        
        # die "Foo";
        
        warn("G1-A");
        
        warn("G1-CallMethodStart");
        TestCase::Go::Coroutine->foo();
        warn("G1-CallMethodEnd");
        
        Go::Coroutine->transfer($self->{coroutines}[1], $self->{coroutines}[0]);
        
        warn("G1-B");
      }, $coroutines->[0]);
      
      $coroutines->[1] = $coroutine1;
      
      warn("G0-A");
      
      Go::Coroutine->transfer($coroutines->[0], $coroutines->[1]);
      
      warn("G0-B");
      
      Go::Coroutine->transfer($coroutines->[0], $coroutines->[1]);
      
      warn("G0-C");
      
    }, $coroutine_return_back);
    
    $coroutines->[0] = $coroutine0;
    
    Go::Coroutine->transfer($coroutine_return_back, $coroutines->[0]);
    
    $coroutines->[0] = undef;
    $coroutines->[1] = undef;
    
    warn("END");
    
    return 1;
  }
  
  static method foo : void () {
    warn "G1-CallMethod";
  }
}
